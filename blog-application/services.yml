services:
  eurekaserver:
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    container_name: eurekaserver
    ports:
      - "8070:8070"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:8070/actuator/health/readiness | grep UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: on-failure
    networks:
      - microservices-network

  blog-service:
    build:
      context: ./blog
      dockerfile: Dockerfile
    container_name: blog-app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/blogdb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=bloguser
      - SPRING_DATASOURCE_PASSWORD=baturayacarturk
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8070/eureka/
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health/readiness | grep UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: on-failure
    depends_on:
      eurekaserver:
        condition: service_healthy
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/userdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8070/eureka/
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:8081/actuator/health/readiness | grep UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: on-failure
    depends_on:
      eurekaserver:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - microservices-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices-network

  sonarqube:
    image: sonarqube:7.9.6-community
    container_name: sonarqube
    environment:
      - SONAR_JDBC_URL=jdbc:mysql://mysql:3306/sonardb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
      - SONAR_JDBC_USERNAME=sonaruser
      - SONAR_JDBC_PASSWORD=baturayacarturk
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - microservices-network

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

