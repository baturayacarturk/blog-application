version: '3'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: blogdb
      MYSQL_USER: bloguser
      MYSQL_PASSWORD: baturayacarturk
      MYSQL_ROOT_PASSWORD: verypowerfulpassword
    volumes:
      - ./blog/src/main/resources/scripts/mysql.sql:/docker-entrypoint-initdb.d/mysql.sql
      - mysql-data:/var/lib/mysql
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -hlocalhost -u$MYSQL_USER -p$MYSQL_PASSWORD" ]
      interval: 30s
      retries: 3
      timeout: 10s
    networks:
      - microservices-network

  postgres:
    image: postgres:13
    container_name: user_service_db
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: bacarturk
      POSTGRES_PASSWORD: bacarturk
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U bacarturk -d userdb'" ]
      interval: 30s
      retries: 5
      timeout: 10s
    networks:
      - microservices-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - discovery.type=single-node
      - ELASTIC_USERNAME=admin
      - ELASTIC_PASSWORD=root
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:9200" ]
      interval: 30s
      retries: 3
      timeout: 10s
    networks:
      - microservices-network

  eurekaserver:
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    container_name: eurekaserver
    ports:
      - "8070:8070"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:8070/actuator/health/readiness | grep UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: on-failure
    networks:
      - microservices-network

  blog-service:
    build:
      context: ./blog
      dockerfile: Dockerfile
    container_name: blog-app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/blogdb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=bloguser
      - SPRING_DATASOURCE_PASSWORD=baturayacarturk
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8070/eureka/
    ports:
      - "8080:8080"
      - "5005:5005"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:8080/actuator/health/readiness | grep UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: on-failure
    depends_on:
      eurekaserver:
        condition: service_healthy
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    networks:
      - microservices-network

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/userdb
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8070/eureka/
    ports:
      - "8081:8081"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:8081/actuator/health/readiness | grep UP || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: on-failure
    depends_on:
      eurekaserver:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - microservices-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - microservices-network

  sonarqube:
    image: sonarqube:7.9.6-community
    container_name: sonarqube
    environment:
      - SONAR_JDBC_URL=jdbc:mysql://mysql:3306/sonardb?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
      - SONAR_JDBC_USERNAME=sonaruser
      - SONAR_JDBC_PASSWORD=baturayacarturk
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka1:19092 --list >/dev/null 2>&1 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      zoo1:
        condition: service_healthy
    networks:
      - microservices-network
  h2:
    image: oscarfonts/h2
    ports:
      - "1521:1521"
      - "81:81"
    environment:
      - H2_OPTIONS=-ifNotExists

volumes:
  mysql-data:
  postgres_data:
  elasticsearch-data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  rabbitmq_data:

networks:
  microservices-network:
    driver: bridge